def genaralvars () {

    env.GIT_REPO = 'https://github.com/JosueRCB/Proyecto.git'
    env.GIT_BRANCH = 'main'
    env.DOCKER_REPO = 'josuercb'
    CONTAINER_PORT= '84'

}


pipeline {
    agent any
    tools {
       terraform 'terraform-2'
    }
    stages {
        stage ("Set Variables") {
            steps {
                genaralvars()
            }
        }
        
        /*stage ("Verify If exist container") {
            steps {
                    script {
                        DOCKERID = sh (script: "docker ps -f publish=${CONTAINER_PORT} -q", returnStdout: true).trim()
                        if  ( DOCKERID !="" ) {
                            if (fileExists('terraform.tfstate')) {
                                sh "terraform destroy  -var=\"container_port=${CONTAINER_PORT}\" -var=\"reponame=${env.DOCKER_REPO}\" --target docker_container.nginx --auto-approve"
                            }
                            else {
                                sh "docker stop ${DOCKERID}"
                            }
                        }
                }
            }
        }*/
        
        stage('terraform format check') {
            steps{
                sh 'terraform fmt'
            }
        }
        stage('terraform Init') {
            steps{
                sh 'terraform init -upgrade'
            }
        }
        stage('terraform apply') {
            steps{
                //withAWS(credentials: 'josue-aws-proyecto', region: 'us-east-1') {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'josue-aws-proyecto', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]){
                   // sh "terraform apply -var=\"container_port=${CONTAINER_PORT}\" -var=\"reponame=${env.DOCKER_REPO}\" --auto-approve"
                    sh "terraform apply --auto-approve"
                }
                script {
                    PUBLIC_IP_EC2 = sh (script: "terraform output instance_public_ip", returnStdout:true).trim()
                }
                echo "${PUBLIC_IP_EC2}"
            }
        }

        stage('Change inventory content') {
            steps{
                sh "echo $PUBLIC_IP_EC2 > josue-inventory.hosts"
            }
        }     
        stage('Wait 30 seconds') {
            steps {
                sleep time:30, unit: 'SECONDS'
            }
        }
       stage('Connect to Host and install Packages') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'josue-ssh-proyecto', installation: 'ansible210', inventory: 'josue-inventory.hosts', playbook: 'playbook-install-packages.yml'
            }
        }
        stage('Connect to Host and execute a command') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'josue-ssh-proyecto', installation: 'ansible210', inventory: 'josue-inventory.hosts', playbook: 'playbook-execute-command-packages.yml'
            }
        }
        stage('Connect to Host and install Docker') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'josue-ssh-proyecto', installation: 'ansible210', inventory: 'josue-inventory.hosts', playbook: 'playbook-install-docker.yml'
            }
        }
      
        stage ("Create Dockerfile") {
            steps {
                sh '''
                    cat <<EOT > Dockerfile
                    FROM nginx:latest
                '''
            }
        }
        stage ("Build Image") {
            steps {
                sh "docker build -t ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER} ."
            }
        }
        stage ("Publish Image") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhubjosue', passwordVariable: 'docker_pass', usernameVariable: 'docker_user')]) {
                    sh "docker login -u $docker_user -p $docker_pass"
                    sh "docker push ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        stage ("Run Image") {
            steps {
                    script {
                        DOCKERID = ""
                        DOCKERID = sh (script: "docker ps -f publish=${CONTAINER_PORT} -q", returnStdout: true).trim()
                        if  ( DOCKERID !="" ) {
                            sh "docker stop ${DOCKERID} && docker run -d -p ${CONTAINER_PORT}:80 ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER}"
                        } else {
                            sh "docker run -d -p ${CONTAINER_PORT}:80 ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER}"
                        }
                }
            }
        }
        
    }
}
