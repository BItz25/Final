def genaralvars () {

    env.GIT_REPO = 'https://github.com/JosueRCB/Proyecto.git'
    env.GIT_BRANCH = 'main'
    env.DOCKER_REPO = 'josuercb'
    CONTAINER_PORT= '84'

}


pipeline {
    agent any
    tools {
       terraform 'terraform-2'
    }
    stages {
        stage ("Set Variables") {
            steps {
                genaralvars()
            }
        }
        /*stage ("Get Code") {
            steps {
                git branch: "${env.GIT_BRANCH}", url: "${env.GIT_REPO}"
            }
        }*/
        stage ("Get npm modules") {
            steps {
                nodejs('nodejs12') {
                    sh "npm install"
                }
            }
        }
        /*stage ("Build project") {
            steps {
                nodejs('nodejs12') {
                    sh "npm run build"
                }
            }
        }*/
        stage ("Create Dockerfile") {
            steps {
                sh '''
                    cat <<EOT > Dockerfile
                    FROM nginx:latest
                    COPY public/ /usr/share/nginx/html/
                '''
            }
        }
        stage ("Build Image") {
            steps {
                sh "docker build -t ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER} ."
            }
        }
        stage ("Publish Image") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhubjosue', passwordVariable: 'docker_pass', usernameVariable: 'docker_user')]) {
                    sh "docker login -u $docker_user -p $docker_pass"
                    sh "docker push ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        stage ("Verify If exist container") {
            steps {
                    script {
                        DOCKERID = sh (script: "docker ps -f publish=${CONTAINER_PORT} -q", returnStdout: true).trim()
                        if  ( DOCKERID !="" ) {
                            if (fileExists('terraform.tfstate')) {
                                sh "terraform destroy --auto-approve"
                            }
                            else {
                                sh "docker stop ${DOCKERID}"
                            }
                        }
                }
            }
        }
        stage('terraform format check') {
            steps{
                sh 'terraform fmt'
            }
        }
        stage('terraform Init') {
            steps{
                sh 'terraform init'
            }
        }
        stage('terraform apply') {
            steps{
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'josue-aws-proyecto', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]){
                    sh "terraform apply --auto-approve"
                }
                }
            }
    }
}
